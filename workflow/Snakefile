# The main entry point of your workflow.
# After configuring, running snakemake -n in a clone of this repository should successfully execute a dry-run of the workflow.

import os
import subprocess
import glob
import pandas as pd
from snakemake.utils import validate
import pathlib
import yaml
import warnings

# configure shell behavior for all rules
shell.executable("/bin/bash")
shell.prefix("set -euo pipefail;")

# Inserting some external libraries
sys.path.append(".")
from lib import pattern_conversions as pc
from lib import target_construction

# record commit-ish ID
label = subprocess.check_output(["git", "describe", "--always"]).strip()
print(f"haplotype phasing workflow {label}")

# create log dir
pathlib.Path("logs/").mkdir(parents=True, exist_ok=True)


# reference the config file and validate
configfile: "config/config.yaml"


validate(config, schema="../schema/global.config.schema.yaml")

analyses = pd.read_csv(config["manifest"], sep="\t", comment="#").set_index(
    "analysis_name", drop=False
)
analysis_configs = {}
for analysis_name, filename in zip(analyses.analysis_name, analyses.analysis_config):
    x = dict()
    with open(filename, "r") as f:
        x = yaml.safe_load(f)
    analysis_configs[analysis_name] = x
    validate(x, "../schema/analysis.config.schema.yaml")

# Definition of potential chromosomes
CHROM = [f"chr{x}" for x in range(1, 23)] + ["chrX"]


def create_full_targets(wildcards):
    """Create the full set of targets."""
    targets = []
    for outfix in analysis_configs.keys():
        filename = checkpoints.list_chromosomes.get(outfix=outfix).output[0]
        chroms = []
        with open(filename, "r") as f:
            for line in f:
                chroms.append(line.rstrip())
        chroms = [x for x in chroms if x != ""]  # NOTE: might not be needed
        targets += target_construction.construct_phasing_targets(
            analysis_configs, chroms, outfix
        )
        if analysis_configs[outfix]["evaluation"]["enabled"]:
            targets += expand(
                "results/switch_error_estimation/{algo}/switch_error_rate.{outfix}.{genome_build}.{chrom}.iser",
                genome_build=analysis_configs[outfix]["genome_build"],
                chrom=chroms,
                outfix=outfix,
                algo=[
                    algo
                    for algo in analysis_configs[outfix]["tools"]
                    if analysis_configs[outfix]["tools"][algo]["enabled"]
                ],
            )
    return targets


localrules:
    all,


rule all:
    input:
        create_full_targets,


# including individual rules
include: "rules/common.smk"
include: "rules/shapeit.smk"
include: "rules/eagle.smk"
include: "rules/beagle.smk"
include: "rules/evaluation.smk"
